syntax = "proto3";

option csharp_namespace = "Grpc.Terminal.Enums";

import "google/protobuf/wrappers.proto";

package terminal;

enum CopyTicks {
    COPY_TICKS_ALL = 0;
    COPY_TICKS_INFO = 1;
    COPY_TICKS_TRADE = 2;
}

enum TickFlags {
    TICK_FLAGS_UNKNOWN = 0;
    TICK_FLAGS_BID     = 0x02;
    TICK_FLAGS_ASK     = 0x04;
    TICK_FLAGS_LAST    = 0x08;
    TICK_FLAGS_VOLUME  = 0x10;
    TICK_FLAGS_BUY     = 0x20;
    TICK_FLAGS_SELL    = 0x40;
}

enum Timeframe {
    TIMEFRAME_UNKNOWN   = 0;
    TIMEFRAME_M1        = 1;
    TIMEFRAME_M2        = 2;
    TIMEFRAME_M3        = 3;
    TIMEFRAME_M4        = 4;
    TIMEFRAME_M5        = 5;
    TIMEFRAME_M6        = 6;
    TIMEFRAME_M10       = 10;
    TIMEFRAME_M12       = 12;
    TIMEFRAME_M15       = 15;
    TIMEFRAME_M20       = 20;
    TIMEFRAME_M30       = 30;
    TIMEFRAME_H1        = 16385;
    TIMEFRAME_H2        = 16386;
    TIMEFRAME_H4        = 16388;
    TIMEFRAME_H3        = 16387;
    TIMEFRAME_H6        = 16390;
    TIMEFRAME_H8        = 16392;
    TIMEFRAME_H12       = 16396;
    TIMEFRAME_D1        = 16408;
    TIMEFRAME_W1        = 32769;
    TIMEFRAME_MN1       = 49153;
}

enum PositionType {
    POSITION_TYPE_BUY  = 0; // Buy
    POSITION_TYPE_SELL = 1; // Sell
}

enum PositionReason {
    POSITION_REASON_CLIENT = 0; // The position was opened as a result of activation of an order placed from a desktop terminal
    POSITION_REASON_MOBILE = 1; // The position was opened as a result of activation of an order placed from a mobile application
    POSITION_REASON_WEB    = 2; // The position was opened as a result of activation of an order placed from the web platform
    POSITION_REASON_EXPERT = 3; // The position was opened as a result of activation of an order placed from an MQL5 program, i.e. an Expert Advisor or a script
}

enum OrderType {
    ORDER_TYPE_BUY               = 0; // Market Buy order
    ORDER_TYPE_SELL              = 1; // Market Sell order
    ORDER_TYPE_BUY_LIMIT         = 2; // Buy Limit pending order
    ORDER_TYPE_SELL_LIMIT        = 3; // Sell Limit pending order
    ORDER_TYPE_BUY_STOP          = 4; // Buy Stop pending order
    ORDER_TYPE_SELL_STOP         = 5; // Sell Stop pending order
    ORDER_TYPE_BUY_STOP_LIMIT    = 6; // Upon reaching the order price, a pending Buy Limit order is placed at the StopLimit price
    ORDER_TYPE_SELL_STOP_LIMIT   = 7; // Upon reaching the order price, a pending Sell Limit order is placed at the StopLimit price
    ORDER_TYPE_CLOSE_BY          = 8; // Order to close a position by an opposite one
}

enum OrderState {
    ORDER_STATE_STARTED        = 0; // Order checked, but not yet accepted by broker
    ORDER_STATE_PLACED         = 1; // Order accepted
    ORDER_STATE_CANCELED       = 2; // Order canceled by client
    ORDER_STATE_PARTIAL        = 3; // Order partially executed
    ORDER_STATE_FILLED         = 4; // Order fully executed
    ORDER_STATE_REJECTED       = 5; // Order rejected
    ORDER_STATE_EXPIRED        = 6; // Order expired
    ORDER_STATE_REQUEST_ADD    = 7; // Order is being registered (placing to the trading system)
    ORDER_STATE_REQUEST_MODIFY = 8; // Order is being modified (changing its parameters)
    ORDER_STATE_REQUEST_CANCEL = 9; // Order is being deleted (deleting from the trading system)
}

enum OrderFilling {
    ORDER_FILLING_FOK    = 0; // An order can be executed in the specified volume only. If the necessary amount of a financial instrument is currently unavailable in the market, the order will not be executed. The desired volume can be made up of several available offers. The possibility of using FOK orders is determined at the trade server.
    ORDER_FILLING_IOC    = 1; // A trader agrees to execute a deal with the volume maximally available in the market within that indicated in the order. If the request cannot be filled completely, an order with the available volume will be executed, and the remaining volume will be canceled. The possibility of using IOC orders is determined at the trade server.
    ORDER_FILLING_RETURN = 2; // In case of partial filling, an order with remaining volume is not canceled but processed further. Return orders are not allowed in the Market Execution mode (market execution â€” SYMBOL_TRADE_EXECUTION_MARKET).
}

enum OrderTime {
    ORDER_TIME_GTC           = 0; // Good till cancel order
    ORDER_TIME_DAY           = 1; // Good till current trade day order
    ORDER_TIME_SPECIFIED     = 2; // Good till expired order
    ORDER_TIME_SPECIFIED_DAY = 3; // The order will be effective till 23:59:59 of the specified day. If this time is outside a trading session, the order expires in the nearest trading time.
}

enum OrderReason {
    ORDER_REASON_CLIENT = 0; // The order was placed from a desktop terminal
    ORDER_REASON_MOBILE = 1; // The order was placed from a mobile application
    ORDER_REASON_WEB    = 2; // The order was placed from a web platform
    ORDER_REASON_EXPERT = 3; // The order was placed from an MQL5-program, i.e. by an Expert Advisor or a script
    ORDER_REASON_SL     = 4; // The order was placed as a result of Stop Loss activation
    ORDER_REASON_TP     = 5; // The order was placed as a result of Take Profit activation
    ORDER_REASON_SO     = 6; // The order was placed as a result of the Stop Out event
}

enum DealType {
    DEAL_TYPE_BUY                       = 0;  // Buy
    DEAL_TYPE_SELL                      = 1;  // Sell
    DEAL_TYPE_BALANCE                   = 2;  // Balance
    DEAL_TYPE_CREDIT                    = 3;  // Credit
    DEAL_TYPE_CHARGE                    = 4;  // Additional charge
    DEAL_TYPE_CORRECTION                = 5;  // Correction
    DEAL_TYPE_BONUS                     = 6;  // Bonus
    DEAL_TYPE_COMMISSION                = 7;  // Additional commission
    DEAL_TYPE_COMMISSION_DAILY          = 8;  // Daily commission
    DEAL_TYPE_COMMISSION_MONTHLY        = 9;  // Monthly commission
    DEAL_TYPE_COMMISSION_AGENT_DAILY    = 10; // Daily agent commission
    DEAL_TYPE_COMMISSION_AGENT_MONTHLY  = 11; // Monthly agent commission
    DEAL_TYPE_INTEREST                  = 12; // Interest rate
    DEAL_TYPE_BUY_CANCELED              = 13; // Canceled buy deal.
    DEAL_TYPE_SELL_CANCELED             = 14; // Canceled sell deal.
    DEAL_DIVIDEND                       = 15; // Dividend operations
    DEAL_DIVIDEND_FRANKED               = 16; // Franked (non-taxable) dividend operations
    DEAL_TAX                            = 17; // Tax charges
}

enum DealReason {
    DEAL_REASON_CLIENT   = 0; // The deal was executed as a result of activation of an order placed from a desktop terminal
    DEAL_REASON_MOBILE   = 1; // The deal was executed as a result of activation of an order placed from a mobile application
    DEAL_REASON_WEB      = 2; // The deal was executed as a result of activation of an order placed from the web platform
    DEAL_REASON_EXPERT   = 3; // The deal was executed as a result of activation of an order placed from an MQL5 program, i.e. an Expert Advisor or a script
    DEAL_REASON_SL       = 4; // The deal was executed as a result of Stop Loss activation
    DEAL_REASON_TP       = 5; // The deal was executed as a result of Take Profit activation
    DEAL_REASON_SO       = 6; // The deal was executed as a result of the Stop Out event
    DEAL_REASON_ROLLOVER = 7; // The deal was executed due to a rollover
    DEAL_REASON_VMARGIN  = 8; // The deal was executed after charging the variation margin
    DEAL_REASON_SPLIT    = 9; // The deal was executed after the split (price reduction) of an instrument, which had an open position during split announcement
}

enum DealEntry {
    DEAL_ENTRY_IN     = 0; // Entry in
    DEAL_ENTRY_OUT    = 1; // Entry out
    DEAL_ENTRY_INOUT  = 2; // Reverse
    DEAL_ENTRY_OUT_BY = 3; // Close a position by an opposite one
}

enum TradeAction{
    TRADE_ACTION_UNKNOWN  = 0;
    TRADE_ACTION_DEAL     = 1;  // Place a trade order for an immediate execution with the specified parameters (market order)
    TRADE_ACTION_PENDING  = 5;  // Place a trade order for the execution under specified conditions (pending order)
    TRADE_ACTION_SLTP     = 6;  // Modify Stop Loss and Take Profit values of an opened position
    TRADE_ACTION_MODIFY   = 7;  // Modify the parameters of the order placed previously
    TRADE_ACTION_REMOVE   = 8;  // Delete the pending order placed previously
    TRADE_ACTION_CLOSE_BY = 10; // Close a position by an opposite one
}

enum TradeRetcode {
    TRADE_RETCODE_UNKNOWN               = 0;
    TRADE_RETCODE_REQUOTE               = 10004; // Requote
    TRADE_RETCODE_REJECT                = 10006; // Request rejected
    TRADE_RETCODE_CANCEL                = 10007; // Request canceled by trader
    TRADE_RETCODE_PLACED                = 10008; // Order placed
    TRADE_RETCODE_DONE                  = 10009; // Request completed
    TRADE_RETCODE_DONE_PARTIAL          = 10010; // Only part of the request was completed
    TRADE_RETCODE_ERROR                 = 10011; // Request processing error
    TRADE_RETCODE_TIMEOUT               = 10012; // Request canceled by timeout
    TRADE_RETCODE_INVALID               = 10013; // Invalid request
    TRADE_RETCODE_INVALID_VOLUME        = 10014; // Invalid volume in the request
    TRADE_RETCODE_INVALID_PRICE         = 10015; // Invalid price in the request
    TRADE_RETCODE_INVALID_STOPS         = 10016; // Invalid stops in the request
    TRADE_RETCODE_TRADE_DISABLED        = 10017; // Trade is disabled
    TRADE_RETCODE_MARKET_CLOSED         = 10018; // Market is closed
    TRADE_RETCODE_NO_MONEY              = 10019; // There is not enough money to complete the request
    TRADE_RETCODE_PRICE_CHANGED         = 10020; // Prices changed
    TRADE_RETCODE_PRICE_OFF             = 10021; // There are no quotes to process the request
    TRADE_RETCODE_INVALID_EXPIRATION    = 10022; // Invalid order expiration date in the request
    TRADE_RETCODE_ORDER_CHANGED         = 10023; // Order state changed
    TRADE_RETCODE_TOO_MANY_REQUESTS     = 10024; // Too frequent requests
    TRADE_RETCODE_NO_CHANGES            = 10025; // No changes in request
    TRADE_RETCODE_SERVER_DISABLES_AT    = 10026; // Autotrading disabled by server
    TRADE_RETCODE_CLIENT_DISABLES_AT    = 10027; // Autotrading disabled by client terminal
    TRADE_RETCODE_LOCKED                = 10028; // Request locked for processing
    TRADE_RETCODE_FROZEN                = 10029; // Order or position frozen
    TRADE_RETCODE_INVALID_FILL          = 10030; // Invalid order filling type
    TRADE_RETCODE_CONNECTION            = 10031; // No connection with the trade server
    TRADE_RETCODE_ONLY_REAL             = 10032; // Operation is allowed only for live accounts
    TRADE_RETCODE_LIMIT_ORDERS          = 10033; // The number of pending orders has reached the limit
    TRADE_RETCODE_LIMIT_VOLUME          = 10034; // The volume of orders and positions for the symbol has reached the limit
    TRADE_RETCODE_INVALID_ORDER         = 10035; // Incorrect or prohibited order type
    TRADE_RETCODE_POSITION_CLOSED       = 10036; // Position with the specified POSITION_IDENTIFIER has already been closed
    TRADE_RETCODE_INVALID_CLOSE_VOLUME  = 10038; // A close volume exceeds the current position volume
    TRADE_RETCODE_CLOSE_ORDER_EXIST     = 10039; // A close order already exists for a specified position. This may happen when working in the hedging system: when attempting to close a position with an opposite one, while close orders for the position already exist; when attempting to fully or partially close a position if the total volume of the already present close orders and the newly placed one exceeds the current position volume
    TRADE_RETCODE_LIMIT_POSITIONS       = 10040; // The number of open positions simultaneously present on an account can be limited by the server settings. After a limit is reached, the server returns the TRADE_RETCODE_LIMIT_POSITIONS error when attempting to place an order. The limitation operates differently depending on the position accounting type: Netting â€” number of open positions is considered. When a limit is reached, the platform does not let placing new orders whose execution may increase the number of open positions. In fact, the platform allows placing orders only for the symbols that already have open positions. The current pending orders are not considered since their execution may lead to changes in the current positions but it cannot increase their number. Hedging â€” pending orders are considered together with open positions, since a pending order activation always leads to opening a new position. When a limit is reached, the platform does not allow placing both new market orders for opening positions and pending orders.
    TRADE_RETCODE_REJECT_CANCEL         = 10041; // The pending order activation request is rejected, the order is canceled
    TRADE_RETCODE_LONG_ONLY             = 10042; // The request is rejected, because the "Only long positions are allowed" rule is set for the symbol (POSITION_TYPE_BUY)
    TRADE_RETCODE_SHORT_ONLY            = 10043; // The request is rejected, because the "Only short positions are allowed" rule is set for the symbol (POSITION_TYPE_SELL)
    TRADE_RETCODE_CLOSE_ONLY            = 10044; // The request is rejected, because the "Only position closing is allowed" rule is set for the symbol
    TRADE_RETCODE_FIFO_CLOSE            = 10045; // The request is rejected, because "Position closing is allowed only by FIFO rule" flag is set for the trading account (ACCOUNT_FIFO_CLOSE=true)
    TRADE_RETCODE_HEDGE_PROHIBITED      = 10046; // The request is rejected, because the "Opposite positions on a single symbol are disabled" rule is set for the trading account. For example, if the account has a Buy position, then a user cannot open a Sell position or place a pending sell order. The rule is only applied to accounts with hedging accounting system (ACCOUNT_MARGIN_MODE=ACCOUNT_MARGIN_MODE_RETAIL_HEDGING).
}

enum Res {
    RES_UNKNOWN                         = 0     ;    
    RES_S_OK                            = 1     ;    // generic success
    RES_E_FAIL                          =-1     ;    // generic fail
    RES_E_INVALID_PARAMS                =-2     ;    // invalid arguments/parameters
    RES_E_NO_MEMORY                     =-3     ;    // no memory condition
    RES_E_NOT_FOUND                     =-4     ;    // no history
    RES_E_INVALID_VERSION               =-5     ;    // invalid version
    RES_E_AUTH_FAILED                   =-6     ;    // authorization failed
    RES_E_UNSUPPORTED                   =-7     ;    // unsupported method
    RES_E_AUTO_TRADING_DISABLED         =-8     ;    // auto-trading disabled
    RES_E_INTERNAL_FAIL                 =-10000 ;    // internal IPC general error
    RES_E_INTERNAL_FAIL_SEND            =-10001 ;    // internal IPC send failed
    RES_E_INTERNAL_FAIL_RECEIVE         =-10002 ;    // internal IPC recv failed
    RES_E_INTERNAL_FAIL_INIT            =-10003 ;    // internal IPC initialization fail
    RES_E_INTERNAL_FAIL_CONNECT         =-10004 ;    // internal IPC no ipc
    RES_E_INTERNAL_FAIL_TIMEOUT         =-10005 ;    // internal timeout
}

message ResponseStatus {
    Res responseCode = 1;                             // response status
    google.protobuf.StringValue responseMessage = 2;  // response message
  }